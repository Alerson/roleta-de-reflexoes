{"ast":null,"code":"import{useState,useContext,useRef,useEffect}from'react';import{MensagensContext}from'../context/MensagensContext';export const useRoleta=()=>{const[girar,setGirar]=useState(false);const[angulo,setAngulo]=useState(0);const{selecionarCartaAleatoria}=useContext(MensagensContext);const timerRef=useRef(null);const girarRoleta=()=>{if(!girar){// Limpar qualquer timer pendente\nif(timerRef.current){clearTimeout(timerRef.current);}// Gerar novo ângulo aleatório\nconst novoAngulo=angulo+1080+Math.floor(Math.random()*720);setAngulo(novoAngulo);setGirar(true);// Após a animação, seleciona uma carta aleatória\ntimerRef.current=setTimeout(()=>{try{selecionarCartaAleatoria();}catch(error){console.error(\"Erro ao selecionar carta aleatória:\",error);}finally{setGirar(false);timerRef.current=null;}},3000);console.log('Roleta girando, carta será selecionada em 3 segundos');}};// Limpar timer ao desmontar\nuseEffect(()=>{return()=>{if(timerRef.current){clearTimeout(timerRef.current);}};},[]);return{girar,angulo,girarRoleta};};","map":{"version":3,"names":["useState","useContext","useRef","useEffect","MensagensContext","useRoleta","girar","setGirar","angulo","setAngulo","selecionarCartaAleatoria","timerRef","girarRoleta","current","clearTimeout","novoAngulo","Math","floor","random","setTimeout","error","console","log"],"sources":["/Users/alersonrigo/workspace/roleta-de-reflexoes/src/hooks/useRoleta.js"],"sourcesContent":["import { useState, useContext, useRef, useEffect } from 'react';\nimport { MensagensContext } from '../context/MensagensContext';\n\nexport const useRoleta = () => {\n  const [girar, setGirar] = useState(false);\n  const [angulo, setAngulo] = useState(0);\n  const { selecionarCartaAleatoria } = useContext(MensagensContext);\n  const timerRef = useRef(null);\n\n  const girarRoleta = () => {\n    if (!girar) {\n      // Limpar qualquer timer pendente\n      if (timerRef.current) {\n        clearTimeout(timerRef.current);\n      }\n      \n      // Gerar novo ângulo aleatório\n      const novoAngulo = angulo + 1080 + Math.floor(Math.random() * 720);\n      setAngulo(novoAngulo);\n      setGirar(true);\n      \n      // Após a animação, seleciona uma carta aleatória\n      timerRef.current = setTimeout(() => {\n        try {\n          selecionarCartaAleatoria();\n        } catch (error) {\n          console.error(\"Erro ao selecionar carta aleatória:\", error);\n        } finally {\n          setGirar(false);\n          timerRef.current = null;\n        }\n      }, 3000);\n      \n      console.log('Roleta girando, carta será selecionada em 3 segundos');\n    }\n  };\n\n  // Limpar timer ao desmontar\n  useEffect(() => {\n    return () => {\n      if (timerRef.current) {\n        clearTimeout(timerRef.current);\n      }\n    };\n  }, []);\n\n  return { girar, angulo, girarRoleta };\n};"],"mappings":"AAAA,OAASA,QAAQ,CAAEC,UAAU,CAAEC,MAAM,CAAEC,SAAS,KAAQ,OAAO,CAC/D,OAASC,gBAAgB,KAAQ,6BAA6B,CAE9D,MAAO,MAAM,CAAAC,SAAS,CAAGA,CAAA,GAAM,CAC7B,KAAM,CAACC,KAAK,CAAEC,QAAQ,CAAC,CAAGP,QAAQ,CAAC,KAAK,CAAC,CACzC,KAAM,CAACQ,MAAM,CAAEC,SAAS,CAAC,CAAGT,QAAQ,CAAC,CAAC,CAAC,CACvC,KAAM,CAAEU,wBAAyB,CAAC,CAAGT,UAAU,CAACG,gBAAgB,CAAC,CACjE,KAAM,CAAAO,QAAQ,CAAGT,MAAM,CAAC,IAAI,CAAC,CAE7B,KAAM,CAAAU,WAAW,CAAGA,CAAA,GAAM,CACxB,GAAI,CAACN,KAAK,CAAE,CACV;AACA,GAAIK,QAAQ,CAACE,OAAO,CAAE,CACpBC,YAAY,CAACH,QAAQ,CAACE,OAAO,CAAC,CAChC,CAEA;AACA,KAAM,CAAAE,UAAU,CAAGP,MAAM,CAAG,IAAI,CAAGQ,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,CAAG,GAAG,CAAC,CAClET,SAAS,CAACM,UAAU,CAAC,CACrBR,QAAQ,CAAC,IAAI,CAAC,CAEd;AACAI,QAAQ,CAACE,OAAO,CAAGM,UAAU,CAAC,IAAM,CAClC,GAAI,CACFT,wBAAwB,CAAC,CAAC,CAC5B,CAAE,MAAOU,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAAC,qCAAqC,CAAEA,KAAK,CAAC,CAC7D,CAAC,OAAS,CACRb,QAAQ,CAAC,KAAK,CAAC,CACfI,QAAQ,CAACE,OAAO,CAAG,IAAI,CACzB,CACF,CAAC,CAAE,IAAI,CAAC,CAERQ,OAAO,CAACC,GAAG,CAAC,sDAAsD,CAAC,CACrE,CACF,CAAC,CAED;AACAnB,SAAS,CAAC,IAAM,CACd,MAAO,IAAM,CACX,GAAIQ,QAAQ,CAACE,OAAO,CAAE,CACpBC,YAAY,CAACH,QAAQ,CAACE,OAAO,CAAC,CAChC,CACF,CAAC,CACH,CAAC,CAAE,EAAE,CAAC,CAEN,MAAO,CAAEP,KAAK,CAAEE,MAAM,CAAEI,WAAY,CAAC,CACvC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}