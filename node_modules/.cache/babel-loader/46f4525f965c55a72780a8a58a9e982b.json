{"ast":null,"code":"/**\n * Serviço para gerenciar áudio no aplicativo\n */\nclass AudioService {\n  constructor() {\n    this.audio = null;\n    this.initialized = false;\n    this.musicaAtiva = false;\n    this.volume = 0.5;\n  }\n\n  /**\n   * Inicializa o serviço de áudio\n   * @param {string} src - O caminho para o arquivo de áudio\n   */\n  init(src = '/musicas/relaxing-background.mp3') {\n    if (this.initialized) return;\n    this.audio = new Audio(src);\n    this.audio.loop = true;\n    this.audio.volume = this.volume;\n\n    // Verificar se o usuário tinha a música ativa anteriormente\n    const musicaAtiva = localStorage.getItem('musicaAtiva') === 'true';\n    this.musicaAtiva = musicaAtiva;\n    if (musicaAtiva) {\n      this.play();\n    }\n    this.initialized = true;\n  }\n\n  /**\n   * Reproduz o áudio\n   */\n  play() {\n    if (!this.initialized) {\n      this.init();\n    }\n    if (this.audio) {\n      try {\n        const playPromise = this.audio.play();\n        if (playPromise !== undefined) {\n          playPromise.catch(error => {\n            console.error(\"Erro ao reproduzir áudio:\", error);\n          });\n        }\n        this.musicaAtiva = true;\n        localStorage.setItem('musicaAtiva', 'true');\n      } catch (error) {\n        console.error(\"Erro ao reproduzir áudio:\", error);\n      }\n    }\n  }\n\n  /**\n   * Pausa o áudio\n   */\n  pause() {\n    if (this.audio) {\n      this.audio.pause();\n      this.musicaAtiva = false;\n      localStorage.setItem('musicaAtiva', 'false');\n    }\n  }\n\n  /**\n   * Alterna entre tocar e pausar a música\n   * @returns {boolean} - O novo estado (true = tocando, false = pausado)\n   */\n  toggle() {\n    if (this.musicaAtiva) {\n      this.pause();\n    } else {\n      this.play();\n    }\n    return this.musicaAtiva;\n  }\n\n  /**\n   * Define o volume do áudio\n   * @param {number} value - O valor do volume (entre 0 e 1)\n   */\n  setVolume(value) {\n    if (value >= 0 && value <= 1) {\n      this.volume = value;\n      if (this.audio) {\n        this.audio.volume = this.volume;\n      }\n    }\n  }\n\n  /**\n   * Verifica se a música está tocando\n   * @returns {boolean} - true se a música estiver tocando, false caso contrário\n   */\n  isPlaying() {\n    return this.musicaAtiva;\n  }\n}\n\n// Exporta uma única instância do serviço\nconst audioService = new AudioService();\nexport default audioService;","map":{"version":3,"names":["AudioService","constructor","audio","initialized","musicaAtiva","volume","init","src","Audio","loop","localStorage","getItem","play","playPromise","undefined","catch","error","console","setItem","pause","toggle","setVolume","value","isPlaying","audioService"],"sources":["/Users/alersonrigo/roleta-de-reflexoes/src/services/AudioService.js"],"sourcesContent":["/**\n * Serviço para gerenciar áudio no aplicativo\n */\nclass AudioService {\n    constructor() {\n      this.audio = null;\n      this.initialized = false;\n      this.musicaAtiva = false;\n      this.volume = 0.5;\n    }\n  \n    /**\n     * Inicializa o serviço de áudio\n     * @param {string} src - O caminho para o arquivo de áudio\n     */\n    init(src = '/musicas/relaxing-background.mp3') {\n      if (this.initialized) return;\n  \n      this.audio = new Audio(src);\n      this.audio.loop = true;\n      this.audio.volume = this.volume;\n      \n      // Verificar se o usuário tinha a música ativa anteriormente\n      const musicaAtiva = localStorage.getItem('musicaAtiva') === 'true';\n      this.musicaAtiva = musicaAtiva;\n      \n      if (musicaAtiva) {\n        this.play();\n      }\n      \n      this.initialized = true;\n    }\n  \n    /**\n     * Reproduz o áudio\n     */\n    play() {\n      if (!this.initialized) {\n        this.init();\n      }\n  \n      if (this.audio) {\n        try {\n          const playPromise = this.audio.play();\n          \n          if (playPromise !== undefined) {\n            playPromise.catch(error => {\n              console.error(\"Erro ao reproduzir áudio:\", error);\n            });\n          }\n          \n          this.musicaAtiva = true;\n          localStorage.setItem('musicaAtiva', 'true');\n        } catch (error) {\n          console.error(\"Erro ao reproduzir áudio:\", error);\n        }\n      }\n    }\n  \n    /**\n     * Pausa o áudio\n     */\n    pause() {\n      if (this.audio) {\n        this.audio.pause();\n        this.musicaAtiva = false;\n        localStorage.setItem('musicaAtiva', 'false');\n      }\n    }\n  \n    /**\n     * Alterna entre tocar e pausar a música\n     * @returns {boolean} - O novo estado (true = tocando, false = pausado)\n     */\n    toggle() {\n      if (this.musicaAtiva) {\n        this.pause();\n      } else {\n        this.play();\n      }\n      return this.musicaAtiva;\n    }\n  \n    /**\n     * Define o volume do áudio\n     * @param {number} value - O valor do volume (entre 0 e 1)\n     */\n    setVolume(value) {\n      if (value >= 0 && value <= 1) {\n        this.volume = value;\n        \n        if (this.audio) {\n          this.audio.volume = this.volume;\n        }\n      }\n    }\n  \n    /**\n     * Verifica se a música está tocando\n     * @returns {boolean} - true se a música estiver tocando, false caso contrário\n     */\n    isPlaying() {\n      return this.musicaAtiva;\n    }\n  }\n  \n  // Exporta uma única instância do serviço\n  const audioService = new AudioService();\n  export default audioService;"],"mappings":"AAAA;AACA;AACA;AACA,MAAMA,YAAY,CAAC;EACfC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,KAAK,GAAG,IAAI;IACjB,IAAI,CAACC,WAAW,GAAG,KAAK;IACxB,IAAI,CAACC,WAAW,GAAG,KAAK;IACxB,IAAI,CAACC,MAAM,GAAG,GAAG;EACnB;;EAEA;AACJ;AACA;AACA;EACIC,IAAIA,CAACC,GAAG,GAAG,kCAAkC,EAAE;IAC7C,IAAI,IAAI,CAACJ,WAAW,EAAE;IAEtB,IAAI,CAACD,KAAK,GAAG,IAAIM,KAAK,CAACD,GAAG,CAAC;IAC3B,IAAI,CAACL,KAAK,CAACO,IAAI,GAAG,IAAI;IACtB,IAAI,CAACP,KAAK,CAACG,MAAM,GAAG,IAAI,CAACA,MAAM;;IAE/B;IACA,MAAMD,WAAW,GAAGM,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC,KAAK,MAAM;IAClE,IAAI,CAACP,WAAW,GAAGA,WAAW;IAE9B,IAAIA,WAAW,EAAE;MACf,IAAI,CAACQ,IAAI,CAAC,CAAC;IACb;IAEA,IAAI,CAACT,WAAW,GAAG,IAAI;EACzB;;EAEA;AACJ;AACA;EACIS,IAAIA,CAAA,EAAG;IACL,IAAI,CAAC,IAAI,CAACT,WAAW,EAAE;MACrB,IAAI,CAACG,IAAI,CAAC,CAAC;IACb;IAEA,IAAI,IAAI,CAACJ,KAAK,EAAE;MACd,IAAI;QACF,MAAMW,WAAW,GAAG,IAAI,CAACX,KAAK,CAACU,IAAI,CAAC,CAAC;QAErC,IAAIC,WAAW,KAAKC,SAAS,EAAE;UAC7BD,WAAW,CAACE,KAAK,CAACC,KAAK,IAAI;YACzBC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;UACnD,CAAC,CAAC;QACJ;QAEA,IAAI,CAACZ,WAAW,GAAG,IAAI;QACvBM,YAAY,CAACQ,OAAO,CAAC,aAAa,EAAE,MAAM,CAAC;MAC7C,CAAC,CAAC,OAAOF,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACnD;IACF;EACF;;EAEA;AACJ;AACA;EACIG,KAAKA,CAAA,EAAG;IACN,IAAI,IAAI,CAACjB,KAAK,EAAE;MACd,IAAI,CAACA,KAAK,CAACiB,KAAK,CAAC,CAAC;MAClB,IAAI,CAACf,WAAW,GAAG,KAAK;MACxBM,YAAY,CAACQ,OAAO,CAAC,aAAa,EAAE,OAAO,CAAC;IAC9C;EACF;;EAEA;AACJ;AACA;AACA;EACIE,MAAMA,CAAA,EAAG;IACP,IAAI,IAAI,CAAChB,WAAW,EAAE;MACpB,IAAI,CAACe,KAAK,CAAC,CAAC;IACd,CAAC,MAAM;MACL,IAAI,CAACP,IAAI,CAAC,CAAC;IACb;IACA,OAAO,IAAI,CAACR,WAAW;EACzB;;EAEA;AACJ;AACA;AACA;EACIiB,SAASA,CAACC,KAAK,EAAE;IACf,IAAIA,KAAK,IAAI,CAAC,IAAIA,KAAK,IAAI,CAAC,EAAE;MAC5B,IAAI,CAACjB,MAAM,GAAGiB,KAAK;MAEnB,IAAI,IAAI,CAACpB,KAAK,EAAE;QACd,IAAI,CAACA,KAAK,CAACG,MAAM,GAAG,IAAI,CAACA,MAAM;MACjC;IACF;EACF;;EAEA;AACJ;AACA;AACA;EACIkB,SAASA,CAAA,EAAG;IACV,OAAO,IAAI,CAACnB,WAAW;EACzB;AACF;;AAEA;AACA,MAAMoB,YAAY,GAAG,IAAIxB,YAAY,CAAC,CAAC;AACvC,eAAewB,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module"}