{"ast":null,"code":"/**\n * Serviço para gerenciar áudio no aplicativo com melhor suporte para iOS\n */class AudioService{constructor(){this.audio=null;this.initialized=false;this.musicaAtiva=false;this.volume=0.5;this.audioContext=null;this.source=null;}/**\n   * Inicializa o serviço de áudio com suporte aprimorado para iOS\n   * @param {string} src - O caminho para o arquivo de áudio\n   */init(){let src=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'/musicas/relaxing-background.mp3';if(this.initialized)return;try{// Criar elemento de áudio com atributos iOS\nthis.audio=new Audio(src);this.audio.setAttribute('webkit-playsinline','true');this.audio.setAttribute('playsinline','true');this.audio.setAttribute('preload','auto');// Propriedades padrão\nthis.audio.loop=true;this.audio.volume=this.volume;// Adicionar listeners para problemas comuns\nthis.audio.addEventListener('error',e=>{console.error(\"Erro no elemento de áudio:\",e);});// Verificar se o usuário tinha a música ativa anteriormente\nconst musicaAtiva=localStorage.getItem('musicaAtiva')==='true';this.musicaAtiva=musicaAtiva;console.log('AudioService inicializado, música ativa:',musicaAtiva);// Marcar como inicializado\nthis.initialized=true;// Em iOS, precisamos iniciar a reprodução dentro de um evento de usuário\n// então não iniciamos automaticamente aqui, apenas se o usuário já\n// havia ativado explicitamente a música antes\nif(musicaAtiva){// Ainda tentamos com um delay, mas isso pode não funcionar em iOS\n// até que haja uma interação do usuário\nsetTimeout(()=>{this.playWithErrorHandling();},1000);}// Adicionar listener para eventos de visibilidade da página\ndocument.addEventListener('visibilitychange',()=>{if(document.visibilityState==='visible'&&this.musicaAtiva){this.playWithErrorHandling();}else if(document.visibilityState==='hidden'){// Em iOS, a música será pausada automaticamente em segundo plano\n// a menos que habilidades de áudio em segundo plano estejam configuradas\n}});}catch(error){console.error(\"Erro ao inicializar serviço de áudio:\",error);this.initialized=true;// Marcar como inicializado mesmo com erro\n}}/**\n   * Tenta reproduzir áudio usando várias técnicas para contornar restrições de iOS\n   */playWithErrorHandling(){if(!this.audio)return;try{// Método principal para reprodução\nconst playPromise=this.audio.play();if(playPromise!==undefined){playPromise.then(()=>{this.musicaAtiva=true;localStorage.setItem('musicaAtiva','true');this._notifyStateChange(true);console.log('Reprodução de áudio bem-sucedida');}).catch(error=>{console.error(\"Erro ao reproduzir áudio:\",error);// Tentar uma abordagem alternativa para iOS\nthis.tryAlternativePlay();});}}catch(error){console.error(\"Exceção ao reproduzir áudio:\",error);this.tryAlternativePlay();}}/**\n   * Tenta uma abordagem alternativa para reproduzir áudio em iOS\n   */tryAlternativePlay(){try{// Verificar se o Web Audio API está disponível\nif(window.AudioContext||window.webkitAudioContext){if(!this.audioContext){const AudioContextClass=window.AudioContext||window.webkitAudioContext;this.audioContext=new AudioContextClass();}// Em iOS, precisamos \"desbloquear\" o áudio com uma interação de usuário\n// Este código tenta simular isso em um contexto diferente\nif(this.audioContext.state==='suspended'){this.audioContext.resume().then(()=>{console.log('AudioContext resumido com sucesso');});}// Se já temos um elemento de áudio, podemos tentar conectá-lo\n// ao Web Audio API como uma fonte alternativa\nif(!this.source&&this.audio){this.source=this.audioContext.createMediaElementSource(this.audio);this.source.connect(this.audioContext.destination);}// Tente novamente com o elemento de áudio\nthis.audio.play().then(()=>{this.musicaAtiva=true;localStorage.setItem('musicaAtiva','true');this._notifyStateChange(true);console.log('Reprodução alternativa bem-sucedida');}).catch(e=>console.error('Falha na segunda tentativa:',e));}}catch(error){console.error(\"Erro na reprodução alternativa:\",error);this.musicaAtiva=false;this._notifyStateChange(false);}}/**\n   * Reproduz o áudio\n   */play(){if(!this.initialized){this.init();return;}this.playWithErrorHandling();return true;// Indica tentativa de iniciar a reprodução\n}/**\n   * Pausa o áudio com tratamento de erros\n   */pause(){if(!this.audio)return false;try{this.audio.pause();this.musicaAtiva=false;localStorage.setItem('musicaAtiva','false');this._notifyStateChange(false);console.log('Áudio pausado com sucesso');return true;// Sucesso ao pausar\n}catch(error){console.error(\"Erro ao pausar áudio:\",error);return false;// Falha ao pausar\n}}/**\n   * Alterna entre tocar e pausar a música\n   * @returns {boolean} - O novo estado (true = tocando, false = pausado)\n   */toggle(){console.log('Solicitação de toggle, estado atual:',this.musicaAtiva);const result=this.musicaAtiva?this.pause():this.play();// Para play(), result será true indicando tentativa iniciada\n// Para pause(), result será true se pausou com sucesso, false se falhou\n// Quando pausamos, o estado já foi atualizado em pause()\n// Quando tocamos, a atualização acontece na promise em playWithErrorHandling()\n// Retorna o novo estado esperado\nreturn this.musicaAtiva;}/**\n   * Define o volume do áudio\n   * @param {number} value - O valor do volume (entre 0 e 1)\n   */setVolume(value){if(value>=0&&value<=1){this.volume=value;if(this.audio){try{this.audio.volume=this.volume;}catch(error){console.error(\"Erro ao ajustar volume:\",error);}}}}/**\n   * Verifica se a música está tocando\n   * @returns {boolean} - true se a música estiver tocando, false caso contrário\n   */isPlaying(){// Além de verificar o estado interno, verificamos também o estado real do elemento de áudio\nif(this.audio){try{// Combinamos o estado armazenado com o estado real do elemento\nreturn this.musicaAtiva||!this.audio.paused&&!this.audio.ended;}catch(error){console.error(\"Erro ao verificar estado de reprodução:\",error);}}return this.musicaAtiva;}/**\n   * Notifica outros componentes sobre mudanças no estado do áudio\n   * @private\n   * @param {boolean} isPlaying - O novo estado de reprodução\n   */_notifyStateChange(isPlaying){try{const event=new CustomEvent('audioStateChange',{detail:{isPlaying:isPlaying}});document.dispatchEvent(event);console.log('Evento audioStateChange disparado:',isPlaying);}catch(error){console.error(\"Erro ao notificar mudança de estado:\",error);}}/**\n   * Limpa recursos do serviço de áudio\n   */cleanup(){if(this.audio){try{this.audio.pause();this.audio.src='';// Remover event listeners\nthis.audio.removeEventListener('error',()=>{});document.removeEventListener('visibilitychange',()=>{});this.audio=null;}catch(error){console.error(\"Erro ao limpar recursos de áudio:\",error);}}// Limpar contexto de áudio\nif(this.audioContext){try{this.audioContext.close();this.audioContext=null;}catch(error){console.error(\"Erro ao fechar AudioContext:\",error);}}this.source=null;this.initialized=false;}}// Exporta uma única instância do serviço\nconst audioService=new AudioService();export default audioService;","map":{"version":3,"names":["AudioService","constructor","audio","initialized","musicaAtiva","volume","audioContext","source","init","src","arguments","length","undefined","Audio","setAttribute","loop","addEventListener","e","console","error","localStorage","getItem","log","setTimeout","playWithErrorHandling","document","visibilityState","playPromise","play","then","setItem","_notifyStateChange","catch","tryAlternativePlay","window","AudioContext","webkitAudioContext","AudioContextClass","state","resume","createMediaElementSource","connect","destination","pause","toggle","result","setVolume","value","isPlaying","paused","ended","event","CustomEvent","detail","dispatchEvent","cleanup","removeEventListener","close","audioService"],"sources":["/Users/alersonrigo/roleta-de-reflexoes/src/services/AudioService.js"],"sourcesContent":["/**\n * Serviço para gerenciar áudio no aplicativo com melhor suporte para iOS\n */\nclass AudioService {\n  constructor() {\n    this.audio = null;\n    this.initialized = false;\n    this.musicaAtiva = false;\n    this.volume = 0.5;\n    this.audioContext = null;\n    this.source = null;\n  }\n\n  /**\n   * Inicializa o serviço de áudio com suporte aprimorado para iOS\n   * @param {string} src - O caminho para o arquivo de áudio\n   */\n  init(src = '/musicas/relaxing-background.mp3') {\n    if (this.initialized) return;\n\n    try {\n      // Criar elemento de áudio com atributos iOS\n      this.audio = new Audio(src);\n      this.audio.setAttribute('webkit-playsinline', 'true');\n      this.audio.setAttribute('playsinline', 'true');\n      this.audio.setAttribute('preload', 'auto');\n      \n      // Propriedades padrão\n      this.audio.loop = true;\n      this.audio.volume = this.volume;\n      \n      // Adicionar listeners para problemas comuns\n      this.audio.addEventListener('error', (e) => {\n        console.error(\"Erro no elemento de áudio:\", e);\n      });\n      \n      // Verificar se o usuário tinha a música ativa anteriormente\n      const musicaAtiva = localStorage.getItem('musicaAtiva') === 'true';\n      this.musicaAtiva = musicaAtiva;\n      console.log('AudioService inicializado, música ativa:', musicaAtiva);\n      \n      // Marcar como inicializado\n      this.initialized = true;\n      \n      // Em iOS, precisamos iniciar a reprodução dentro de um evento de usuário\n      // então não iniciamos automaticamente aqui, apenas se o usuário já\n      // havia ativado explicitamente a música antes\n      if (musicaAtiva) {\n        // Ainda tentamos com um delay, mas isso pode não funcionar em iOS\n        // até que haja uma interação do usuário\n        setTimeout(() => {\n          this.playWithErrorHandling();\n        }, 1000);\n      }\n\n      // Adicionar listener para eventos de visibilidade da página\n      document.addEventListener('visibilitychange', () => {\n        if (document.visibilityState === 'visible' && this.musicaAtiva) {\n          this.playWithErrorHandling();\n        } else if (document.visibilityState === 'hidden') {\n          // Em iOS, a música será pausada automaticamente em segundo plano\n          // a menos que habilidades de áudio em segundo plano estejam configuradas\n        }\n      });\n    } catch (error) {\n      console.error(\"Erro ao inicializar serviço de áudio:\", error);\n      this.initialized = true; // Marcar como inicializado mesmo com erro\n    }\n  }\n\n  /**\n   * Tenta reproduzir áudio usando várias técnicas para contornar restrições de iOS\n   */\n  playWithErrorHandling() {\n    if (!this.audio) return;\n    \n    try {\n      // Método principal para reprodução\n      const playPromise = this.audio.play();\n      \n      if (playPromise !== undefined) {\n        playPromise\n          .then(() => {\n            this.musicaAtiva = true;\n            localStorage.setItem('musicaAtiva', 'true');\n            this._notifyStateChange(true);\n            console.log('Reprodução de áudio bem-sucedida');\n          })\n          .catch(error => {\n            console.error(\"Erro ao reproduzir áudio:\", error);\n            // Tentar uma abordagem alternativa para iOS\n            this.tryAlternativePlay();\n          });\n      }\n    } catch (error) {\n      console.error(\"Exceção ao reproduzir áudio:\", error);\n      this.tryAlternativePlay();\n    }\n  }\n\n  /**\n   * Tenta uma abordagem alternativa para reproduzir áudio em iOS\n   */\n  tryAlternativePlay() {\n    try {\n      // Verificar se o Web Audio API está disponível\n      if (window.AudioContext || window.webkitAudioContext) {\n        if (!this.audioContext) {\n          const AudioContextClass = window.AudioContext || window.webkitAudioContext;\n          this.audioContext = new AudioContextClass();\n        }\n        \n        // Em iOS, precisamos \"desbloquear\" o áudio com uma interação de usuário\n        // Este código tenta simular isso em um contexto diferente\n        if (this.audioContext.state === 'suspended') {\n          this.audioContext.resume().then(() => {\n            console.log('AudioContext resumido com sucesso');\n          });\n        }\n        \n        // Se já temos um elemento de áudio, podemos tentar conectá-lo\n        // ao Web Audio API como uma fonte alternativa\n        if (!this.source && this.audio) {\n          this.source = this.audioContext.createMediaElementSource(this.audio);\n          this.source.connect(this.audioContext.destination);\n        }\n        \n        // Tente novamente com o elemento de áudio\n        this.audio.play()\n          .then(() => {\n            this.musicaAtiva = true;\n            localStorage.setItem('musicaAtiva', 'true');\n            this._notifyStateChange(true);\n            console.log('Reprodução alternativa bem-sucedida');\n          })\n          .catch(e => console.error('Falha na segunda tentativa:', e));\n      }\n    } catch (error) {\n      console.error(\"Erro na reprodução alternativa:\", error);\n      this.musicaAtiva = false;\n      this._notifyStateChange(false);\n    }\n  }\n\n  /**\n   * Reproduz o áudio\n   */\n  play() {\n    if (!this.initialized) {\n      this.init();\n      return;\n    }\n\n    this.playWithErrorHandling();\n    return true; // Indica tentativa de iniciar a reprodução\n  }\n\n  /**\n   * Pausa o áudio com tratamento de erros\n   */\n  pause() {\n    if (!this.audio) return false;\n    \n    try {\n      this.audio.pause();\n      this.musicaAtiva = false;\n      localStorage.setItem('musicaAtiva', 'false');\n      this._notifyStateChange(false);\n      console.log('Áudio pausado com sucesso');\n      return true; // Sucesso ao pausar\n    } catch (error) {\n      console.error(\"Erro ao pausar áudio:\", error);\n      return false; // Falha ao pausar\n    }\n  }\n\n  /**\n   * Alterna entre tocar e pausar a música\n   * @returns {boolean} - O novo estado (true = tocando, false = pausado)\n   */\n  toggle() {\n    console.log('Solicitação de toggle, estado atual:', this.musicaAtiva);\n    const result = this.musicaAtiva ? this.pause() : this.play();\n    \n    // Para play(), result será true indicando tentativa iniciada\n    // Para pause(), result será true se pausou com sucesso, false se falhou\n    \n    // Quando pausamos, o estado já foi atualizado em pause()\n    // Quando tocamos, a atualização acontece na promise em playWithErrorHandling()\n    \n    // Retorna o novo estado esperado\n    return this.musicaAtiva;\n  }\n\n  /**\n   * Define o volume do áudio\n   * @param {number} value - O valor do volume (entre 0 e 1)\n   */\n  setVolume(value) {\n    if (value >= 0 && value <= 1) {\n      this.volume = value;\n      \n      if (this.audio) {\n        try {\n          this.audio.volume = this.volume;\n        } catch (error) {\n          console.error(\"Erro ao ajustar volume:\", error);\n        }\n      }\n    }\n  }\n\n  /**\n   * Verifica se a música está tocando\n   * @returns {boolean} - true se a música estiver tocando, false caso contrário\n   */\n  isPlaying() {\n    // Além de verificar o estado interno, verificamos também o estado real do elemento de áudio\n    if (this.audio) {\n      try {\n        // Combinamos o estado armazenado com o estado real do elemento\n        return this.musicaAtiva || (!this.audio.paused && !this.audio.ended);\n      } catch (error) {\n        console.error(\"Erro ao verificar estado de reprodução:\", error);\n      }\n    }\n    return this.musicaAtiva;\n  }\n\n  /**\n   * Notifica outros componentes sobre mudanças no estado do áudio\n   * @private\n   * @param {boolean} isPlaying - O novo estado de reprodução\n   */\n  _notifyStateChange(isPlaying) {\n    try {\n      const event = new CustomEvent('audioStateChange', { \n        detail: { isPlaying: isPlaying } \n      });\n      document.dispatchEvent(event);\n      console.log('Evento audioStateChange disparado:', isPlaying);\n    } catch (error) {\n      console.error(\"Erro ao notificar mudança de estado:\", error);\n    }\n  }\n\n  /**\n   * Limpa recursos do serviço de áudio\n   */\n  cleanup() {\n    if (this.audio) {\n      try {\n        this.audio.pause();\n        this.audio.src = '';\n        \n        // Remover event listeners\n        this.audio.removeEventListener('error', () => {});\n        document.removeEventListener('visibilitychange', () => {});\n        \n        this.audio = null;\n      } catch (error) {\n        console.error(\"Erro ao limpar recursos de áudio:\", error);\n      }\n    }\n    \n    // Limpar contexto de áudio\n    if (this.audioContext) {\n      try {\n        this.audioContext.close();\n        this.audioContext = null;\n      } catch (error) {\n        console.error(\"Erro ao fechar AudioContext:\", error);\n      }\n    }\n    \n    this.source = null;\n    this.initialized = false;\n  }\n}\n\n// Exporta uma única instância do serviço\nconst audioService = new AudioService();\nexport default audioService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}