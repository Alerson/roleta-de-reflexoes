{"ast":null,"code":"/**\n * Serviço para gerenciar áudio no aplicativo com melhor suporte para iOS\n */\nclass AudioService {\n  constructor() {\n    this.audio = null;\n    this.initialized = false;\n    this.musicaAtiva = false;\n    this.volume = 0.5;\n    this.audioContext = null;\n    this.source = null;\n  }\n\n  /**\n   * Inicializa o serviço de áudio com suporte aprimorado para iOS\n   * @param {string} src - O caminho para o arquivo de áudio\n   */\n  init(src = '/musicas/relaxing-background.mp3') {\n    if (this.initialized) return;\n    try {\n      // Criar elemento de áudio com atributos iOS\n      this.audio = new Audio(src);\n      this.audio.setAttribute('webkit-playsinline', 'true');\n      this.audio.setAttribute('playsinline', 'true');\n      this.audio.setAttribute('preload', 'auto');\n\n      // Propriedades padrão\n      this.audio.loop = true;\n      this.audio.volume = this.volume;\n\n      // Adicionar listeners para problemas comuns\n      this.audio.addEventListener('error', e => {\n        console.error(\"Erro no elemento de áudio:\", e);\n      });\n\n      // Verificar se o usuário tinha a música ativa anteriormente\n      const musicaAtiva = localStorage.getItem('musicaAtiva') === 'true';\n      this.musicaAtiva = musicaAtiva;\n      console.log('AudioService inicializado, música ativa:', musicaAtiva);\n\n      // Marcar como inicializado\n      this.initialized = true;\n\n      // Em iOS, precisamos iniciar a reprodução dentro de um evento de usuário\n      // então não iniciamos automaticamente aqui, apenas se o usuário já\n      // havia ativado explicitamente a música antes\n      if (musicaAtiva) {\n        // Ainda tentamos com um delay, mas isso pode não funcionar em iOS\n        // até que haja uma interação do usuário\n        setTimeout(() => {\n          this.playWithErrorHandling();\n        }, 1000);\n      }\n\n      // Adicionar listener para eventos de visibilidade da página\n      document.addEventListener('visibilitychange', () => {\n        if (document.visibilityState === 'visible' && this.musicaAtiva) {\n          this.playWithErrorHandling();\n        } else if (document.visibilityState === 'hidden') {\n          // Em iOS, a música será pausada automaticamente em segundo plano\n          // a menos que habilidades de áudio em segundo plano estejam configuradas\n        }\n      });\n    } catch (error) {\n      console.error(\"Erro ao inicializar serviço de áudio:\", error);\n      this.initialized = true; // Marcar como inicializado mesmo com erro\n    }\n  }\n\n  /**\n   * Tenta reproduzir áudio usando várias técnicas para contornar restrições de iOS\n   */\n  playWithErrorHandling() {\n    if (!this.audio) return;\n    try {\n      // Método principal para reprodução\n      const playPromise = this.audio.play();\n      if (playPromise !== undefined) {\n        playPromise.then(() => {\n          this.musicaAtiva = true;\n          localStorage.setItem('musicaAtiva', 'true');\n          this._notifyStateChange(true);\n          console.log('Reprodução de áudio bem-sucedida');\n        }).catch(error => {\n          console.error(\"Erro ao reproduzir áudio:\", error);\n          // Tentar uma abordagem alternativa para iOS\n          this.tryAlternativePlay();\n        });\n      }\n    } catch (error) {\n      console.error(\"Exceção ao reproduzir áudio:\", error);\n      this.tryAlternativePlay();\n    }\n  }\n\n  /**\n   * Tenta uma abordagem alternativa para reproduzir áudio em iOS\n   */\n  tryAlternativePlay() {\n    try {\n      // Verificar se o Web Audio API está disponível\n      if (window.AudioContext || window.webkitAudioContext) {\n        if (!this.audioContext) {\n          const AudioContextClass = window.AudioContext || window.webkitAudioContext;\n          this.audioContext = new AudioContextClass();\n        }\n\n        // Em iOS, precisamos \"desbloquear\" o áudio com uma interação de usuário\n        // Este código tenta simular isso em um contexto diferente\n        if (this.audioContext.state === 'suspended') {\n          this.audioContext.resume().then(() => {\n            console.log('AudioContext resumido com sucesso');\n          });\n        }\n\n        // Se já temos um elemento de áudio, podemos tentar conectá-lo\n        // ao Web Audio API como uma fonte alternativa\n        if (!this.source && this.audio) {\n          this.source = this.audioContext.createMediaElementSource(this.audio);\n          this.source.connect(this.audioContext.destination);\n        }\n\n        // Tente novamente com o elemento de áudio\n        this.audio.play().then(() => {\n          this.musicaAtiva = true;\n          localStorage.setItem('musicaAtiva', 'true');\n          this._notifyStateChange(true);\n          console.log('Reprodução alternativa bem-sucedida');\n        }).catch(e => console.error('Falha na segunda tentativa:', e));\n      }\n    } catch (error) {\n      console.error(\"Erro na reprodução alternativa:\", error);\n      this.musicaAtiva = false;\n      this._notifyStateChange(false);\n    }\n  }\n\n  /**\n   * Reproduz o áudio\n   */\n  play() {\n    if (!this.initialized) {\n      this.init();\n      return;\n    }\n    this.playWithErrorHandling();\n    return true; // Indica tentativa de iniciar a reprodução\n  }\n\n  /**\n   * Pausa o áudio com tratamento de erros\n   */\n  pause() {\n    if (!this.audio) return false;\n    try {\n      this.audio.pause();\n      this.musicaAtiva = false;\n      localStorage.setItem('musicaAtiva', 'false');\n      this._notifyStateChange(false);\n      console.log('Áudio pausado com sucesso');\n      return true; // Sucesso ao pausar\n    } catch (error) {\n      console.error(\"Erro ao pausar áudio:\", error);\n      return false; // Falha ao pausar\n    }\n  }\n\n  /**\n   * Alterna entre tocar e pausar a música\n   * @returns {boolean} - O novo estado (true = tocando, false = pausado)\n   */\n  toggle() {\n    console.log('Solicitação de toggle, estado atual:', this.musicaAtiva);\n    const result = this.musicaAtiva ? this.pause() : this.play();\n\n    // Para play(), result será true indicando tentativa iniciada\n    // Para pause(), result será true se pausou com sucesso, false se falhou\n\n    // Quando pausamos, o estado já foi atualizado em pause()\n    // Quando tocamos, a atualização acontece na promise em playWithErrorHandling()\n\n    // Retorna o novo estado esperado\n    return this.musicaAtiva;\n  }\n\n  /**\n   * Define o volume do áudio\n   * @param {number} value - O valor do volume (entre 0 e 1)\n   */\n  setVolume(value) {\n    if (value >= 0 && value <= 1) {\n      this.volume = value;\n      if (this.audio) {\n        try {\n          this.audio.volume = this.volume;\n        } catch (error) {\n          console.error(\"Erro ao ajustar volume:\", error);\n        }\n      }\n    }\n  }\n\n  /**\n   * Verifica se a música está tocando\n   * @returns {boolean} - true se a música estiver tocando, false caso contrário\n   */\n  isPlaying() {\n    // Além de verificar o estado interno, verificamos também o estado real do elemento de áudio\n    if (this.audio) {\n      try {\n        // Combinamos o estado armazenado com o estado real do elemento\n        return this.musicaAtiva || !this.audio.paused && !this.audio.ended;\n      } catch (error) {\n        console.error(\"Erro ao verificar estado de reprodução:\", error);\n      }\n    }\n    return this.musicaAtiva;\n  }\n\n  /**\n   * Notifica outros componentes sobre mudanças no estado do áudio\n   * @private\n   * @param {boolean} isPlaying - O novo estado de reprodução\n   */\n  _notifyStateChange(isPlaying) {\n    try {\n      const event = new CustomEvent('audioStateChange', {\n        detail: {\n          isPlaying: isPlaying\n        }\n      });\n      document.dispatchEvent(event);\n      console.log('Evento audioStateChange disparado:', isPlaying);\n    } catch (error) {\n      console.error(\"Erro ao notificar mudança de estado:\", error);\n    }\n  }\n\n  /**\n   * Limpa recursos do serviço de áudio\n   */\n  cleanup() {\n    if (this.audio) {\n      try {\n        this.audio.pause();\n        this.audio.src = '';\n\n        // Remover event listeners\n        this.audio.removeEventListener('error', () => {});\n        document.removeEventListener('visibilitychange', () => {});\n        this.audio = null;\n      } catch (error) {\n        console.error(\"Erro ao limpar recursos de áudio:\", error);\n      }\n    }\n\n    // Limpar contexto de áudio\n    if (this.audioContext) {\n      try {\n        this.audioContext.close();\n        this.audioContext = null;\n      } catch (error) {\n        console.error(\"Erro ao fechar AudioContext:\", error);\n      }\n    }\n    this.source = null;\n    this.initialized = false;\n  }\n}\n\n// Exporta uma única instância do serviço\nconst audioService = new AudioService();\nexport default audioService;","map":{"version":3,"names":["AudioService","constructor","audio","initialized","musicaAtiva","volume","audioContext","source","init","src","Audio","setAttribute","loop","addEventListener","e","console","error","localStorage","getItem","log","setTimeout","playWithErrorHandling","document","visibilityState","playPromise","play","undefined","then","setItem","_notifyStateChange","catch","tryAlternativePlay","window","AudioContext","webkitAudioContext","AudioContextClass","state","resume","createMediaElementSource","connect","destination","pause","toggle","result","setVolume","value","isPlaying","paused","ended","event","CustomEvent","detail","dispatchEvent","cleanup","removeEventListener","close","audioService"],"sources":["/Users/alersonrigo/roleta-de-reflexoes/src/services/AudioService.js"],"sourcesContent":["/**\n * Serviço para gerenciar áudio no aplicativo com melhor suporte para iOS\n */\nclass AudioService {\n  constructor() {\n    this.audio = null;\n    this.initialized = false;\n    this.musicaAtiva = false;\n    this.volume = 0.5;\n    this.audioContext = null;\n    this.source = null;\n  }\n\n  /**\n   * Inicializa o serviço de áudio com suporte aprimorado para iOS\n   * @param {string} src - O caminho para o arquivo de áudio\n   */\n  init(src = '/musicas/relaxing-background.mp3') {\n    if (this.initialized) return;\n\n    try {\n      // Criar elemento de áudio com atributos iOS\n      this.audio = new Audio(src);\n      this.audio.setAttribute('webkit-playsinline', 'true');\n      this.audio.setAttribute('playsinline', 'true');\n      this.audio.setAttribute('preload', 'auto');\n      \n      // Propriedades padrão\n      this.audio.loop = true;\n      this.audio.volume = this.volume;\n      \n      // Adicionar listeners para problemas comuns\n      this.audio.addEventListener('error', (e) => {\n        console.error(\"Erro no elemento de áudio:\", e);\n      });\n      \n      // Verificar se o usuário tinha a música ativa anteriormente\n      const musicaAtiva = localStorage.getItem('musicaAtiva') === 'true';\n      this.musicaAtiva = musicaAtiva;\n      console.log('AudioService inicializado, música ativa:', musicaAtiva);\n      \n      // Marcar como inicializado\n      this.initialized = true;\n      \n      // Em iOS, precisamos iniciar a reprodução dentro de um evento de usuário\n      // então não iniciamos automaticamente aqui, apenas se o usuário já\n      // havia ativado explicitamente a música antes\n      if (musicaAtiva) {\n        // Ainda tentamos com um delay, mas isso pode não funcionar em iOS\n        // até que haja uma interação do usuário\n        setTimeout(() => {\n          this.playWithErrorHandling();\n        }, 1000);\n      }\n\n      // Adicionar listener para eventos de visibilidade da página\n      document.addEventListener('visibilitychange', () => {\n        if (document.visibilityState === 'visible' && this.musicaAtiva) {\n          this.playWithErrorHandling();\n        } else if (document.visibilityState === 'hidden') {\n          // Em iOS, a música será pausada automaticamente em segundo plano\n          // a menos que habilidades de áudio em segundo plano estejam configuradas\n        }\n      });\n    } catch (error) {\n      console.error(\"Erro ao inicializar serviço de áudio:\", error);\n      this.initialized = true; // Marcar como inicializado mesmo com erro\n    }\n  }\n\n  /**\n   * Tenta reproduzir áudio usando várias técnicas para contornar restrições de iOS\n   */\n  playWithErrorHandling() {\n    if (!this.audio) return;\n    \n    try {\n      // Método principal para reprodução\n      const playPromise = this.audio.play();\n      \n      if (playPromise !== undefined) {\n        playPromise\n          .then(() => {\n            this.musicaAtiva = true;\n            localStorage.setItem('musicaAtiva', 'true');\n            this._notifyStateChange(true);\n            console.log('Reprodução de áudio bem-sucedida');\n          })\n          .catch(error => {\n            console.error(\"Erro ao reproduzir áudio:\", error);\n            // Tentar uma abordagem alternativa para iOS\n            this.tryAlternativePlay();\n          });\n      }\n    } catch (error) {\n      console.error(\"Exceção ao reproduzir áudio:\", error);\n      this.tryAlternativePlay();\n    }\n  }\n\n  /**\n   * Tenta uma abordagem alternativa para reproduzir áudio em iOS\n   */\n  tryAlternativePlay() {\n    try {\n      // Verificar se o Web Audio API está disponível\n      if (window.AudioContext || window.webkitAudioContext) {\n        if (!this.audioContext) {\n          const AudioContextClass = window.AudioContext || window.webkitAudioContext;\n          this.audioContext = new AudioContextClass();\n        }\n        \n        // Em iOS, precisamos \"desbloquear\" o áudio com uma interação de usuário\n        // Este código tenta simular isso em um contexto diferente\n        if (this.audioContext.state === 'suspended') {\n          this.audioContext.resume().then(() => {\n            console.log('AudioContext resumido com sucesso');\n          });\n        }\n        \n        // Se já temos um elemento de áudio, podemos tentar conectá-lo\n        // ao Web Audio API como uma fonte alternativa\n        if (!this.source && this.audio) {\n          this.source = this.audioContext.createMediaElementSource(this.audio);\n          this.source.connect(this.audioContext.destination);\n        }\n        \n        // Tente novamente com o elemento de áudio\n        this.audio.play()\n          .then(() => {\n            this.musicaAtiva = true;\n            localStorage.setItem('musicaAtiva', 'true');\n            this._notifyStateChange(true);\n            console.log('Reprodução alternativa bem-sucedida');\n          })\n          .catch(e => console.error('Falha na segunda tentativa:', e));\n      }\n    } catch (error) {\n      console.error(\"Erro na reprodução alternativa:\", error);\n      this.musicaAtiva = false;\n      this._notifyStateChange(false);\n    }\n  }\n\n  /**\n   * Reproduz o áudio\n   */\n  play() {\n    if (!this.initialized) {\n      this.init();\n      return;\n    }\n\n    this.playWithErrorHandling();\n    return true; // Indica tentativa de iniciar a reprodução\n  }\n\n  /**\n   * Pausa o áudio com tratamento de erros\n   */\n  pause() {\n    if (!this.audio) return false;\n    \n    try {\n      this.audio.pause();\n      this.musicaAtiva = false;\n      localStorage.setItem('musicaAtiva', 'false');\n      this._notifyStateChange(false);\n      console.log('Áudio pausado com sucesso');\n      return true; // Sucesso ao pausar\n    } catch (error) {\n      console.error(\"Erro ao pausar áudio:\", error);\n      return false; // Falha ao pausar\n    }\n  }\n\n  /**\n   * Alterna entre tocar e pausar a música\n   * @returns {boolean} - O novo estado (true = tocando, false = pausado)\n   */\n  toggle() {\n    console.log('Solicitação de toggle, estado atual:', this.musicaAtiva);\n    const result = this.musicaAtiva ? this.pause() : this.play();\n    \n    // Para play(), result será true indicando tentativa iniciada\n    // Para pause(), result será true se pausou com sucesso, false se falhou\n    \n    // Quando pausamos, o estado já foi atualizado em pause()\n    // Quando tocamos, a atualização acontece na promise em playWithErrorHandling()\n    \n    // Retorna o novo estado esperado\n    return this.musicaAtiva;\n  }\n\n  /**\n   * Define o volume do áudio\n   * @param {number} value - O valor do volume (entre 0 e 1)\n   */\n  setVolume(value) {\n    if (value >= 0 && value <= 1) {\n      this.volume = value;\n      \n      if (this.audio) {\n        try {\n          this.audio.volume = this.volume;\n        } catch (error) {\n          console.error(\"Erro ao ajustar volume:\", error);\n        }\n      }\n    }\n  }\n\n  /**\n   * Verifica se a música está tocando\n   * @returns {boolean} - true se a música estiver tocando, false caso contrário\n   */\n  isPlaying() {\n    // Além de verificar o estado interno, verificamos também o estado real do elemento de áudio\n    if (this.audio) {\n      try {\n        // Combinamos o estado armazenado com o estado real do elemento\n        return this.musicaAtiva || (!this.audio.paused && !this.audio.ended);\n      } catch (error) {\n        console.error(\"Erro ao verificar estado de reprodução:\", error);\n      }\n    }\n    return this.musicaAtiva;\n  }\n\n  /**\n   * Notifica outros componentes sobre mudanças no estado do áudio\n   * @private\n   * @param {boolean} isPlaying - O novo estado de reprodução\n   */\n  _notifyStateChange(isPlaying) {\n    try {\n      const event = new CustomEvent('audioStateChange', { \n        detail: { isPlaying: isPlaying } \n      });\n      document.dispatchEvent(event);\n      console.log('Evento audioStateChange disparado:', isPlaying);\n    } catch (error) {\n      console.error(\"Erro ao notificar mudança de estado:\", error);\n    }\n  }\n\n  /**\n   * Limpa recursos do serviço de áudio\n   */\n  cleanup() {\n    if (this.audio) {\n      try {\n        this.audio.pause();\n        this.audio.src = '';\n        \n        // Remover event listeners\n        this.audio.removeEventListener('error', () => {});\n        document.removeEventListener('visibilitychange', () => {});\n        \n        this.audio = null;\n      } catch (error) {\n        console.error(\"Erro ao limpar recursos de áudio:\", error);\n      }\n    }\n    \n    // Limpar contexto de áudio\n    if (this.audioContext) {\n      try {\n        this.audioContext.close();\n        this.audioContext = null;\n      } catch (error) {\n        console.error(\"Erro ao fechar AudioContext:\", error);\n      }\n    }\n    \n    this.source = null;\n    this.initialized = false;\n  }\n}\n\n// Exporta uma única instância do serviço\nconst audioService = new AudioService();\nexport default audioService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}