{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useContext, useRef, useEffect } from 'react';\nimport { MensagensContext } from '../context/MensagensContext';\nexport const useRoleta = () => {\n  _s();\n  const [girar, setGirar] = useState(false);\n  const [angulo, setAngulo] = useState(0);\n  const {\n    selecionarCartaAleatoria\n  } = useContext(MensagensContext);\n  const timerRef = useRef(null);\n  const girarRoleta = () => {\n    if (!girar) {\n      // Limpar qualquer timer pendente\n      if (timerRef.current) {\n        clearTimeout(timerRef.current);\n      }\n\n      // Gerar novo ângulo aleatório\n      const novoAngulo = angulo + 1080 + Math.floor(Math.random() * 720);\n      setAngulo(novoAngulo);\n      setGirar(true);\n\n      // Após a animação, seleciona uma carta aleatória\n      timerRef.current = setTimeout(() => {\n        try {\n          selecionarCartaAleatoria();\n        } catch (error) {\n          console.error(\"Erro ao selecionar carta aleatória:\", error);\n        } finally {\n          setGirar(false);\n          timerRef.current = null;\n        }\n      }, 3000);\n      console.log('Roleta girando, carta será selecionada em 3 segundos');\n    }\n  };\n\n  // Limpar timer ao desmontar\n  useEffect(() => {\n    return () => {\n      if (timerRef.current) {\n        clearTimeout(timerRef.current);\n      }\n    };\n  }, []);\n  return {\n    girar,\n    angulo,\n    girarRoleta\n  };\n};\n_s(useRoleta, \"+2cBlqfwlG9+BxogrhOb60UGOyQ=\");","map":{"version":3,"names":["useState","useContext","useRef","useEffect","MensagensContext","useRoleta","_s","girar","setGirar","angulo","setAngulo","selecionarCartaAleatoria","timerRef","girarRoleta","current","clearTimeout","novoAngulo","Math","floor","random","setTimeout","error","console","log"],"sources":["/Users/alersonrigo/roleta-de-reflexoes/src/hooks/useRoleta.js"],"sourcesContent":["import { useState, useContext, useRef, useEffect } from 'react';\nimport { MensagensContext } from '../context/MensagensContext';\n\nexport const useRoleta = () => {\n  const [girar, setGirar] = useState(false);\n  const [angulo, setAngulo] = useState(0);\n  const { selecionarCartaAleatoria } = useContext(MensagensContext);\n  const timerRef = useRef(null);\n\n  const girarRoleta = () => {\n    if (!girar) {\n      // Limpar qualquer timer pendente\n      if (timerRef.current) {\n        clearTimeout(timerRef.current);\n      }\n      \n      // Gerar novo ângulo aleatório\n      const novoAngulo = angulo + 1080 + Math.floor(Math.random() * 720);\n      setAngulo(novoAngulo);\n      setGirar(true);\n      \n      // Após a animação, seleciona uma carta aleatória\n      timerRef.current = setTimeout(() => {\n        try {\n          selecionarCartaAleatoria();\n        } catch (error) {\n          console.error(\"Erro ao selecionar carta aleatória:\", error);\n        } finally {\n          setGirar(false);\n          timerRef.current = null;\n        }\n      }, 3000);\n      \n      console.log('Roleta girando, carta será selecionada em 3 segundos');\n    }\n  };\n\n  // Limpar timer ao desmontar\n  useEffect(() => {\n    return () => {\n      if (timerRef.current) {\n        clearTimeout(timerRef.current);\n      }\n    };\n  }, []);\n\n  return { girar, angulo, girarRoleta };\n};"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,UAAU,EAAEC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAC/D,SAASC,gBAAgB,QAAQ,6BAA6B;AAE9D,OAAO,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC7B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EACzC,MAAM,CAACS,MAAM,EAAEC,SAAS,CAAC,GAAGV,QAAQ,CAAC,CAAC,CAAC;EACvC,MAAM;IAAEW;EAAyB,CAAC,GAAGV,UAAU,CAACG,gBAAgB,CAAC;EACjE,MAAMQ,QAAQ,GAAGV,MAAM,CAAC,IAAI,CAAC;EAE7B,MAAMW,WAAW,GAAGA,CAAA,KAAM;IACxB,IAAI,CAACN,KAAK,EAAE;MACV;MACA,IAAIK,QAAQ,CAACE,OAAO,EAAE;QACpBC,YAAY,CAACH,QAAQ,CAACE,OAAO,CAAC;MAChC;;MAEA;MACA,MAAME,UAAU,GAAGP,MAAM,GAAG,IAAI,GAAGQ,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC;MAClET,SAAS,CAACM,UAAU,CAAC;MACrBR,QAAQ,CAAC,IAAI,CAAC;;MAEd;MACAI,QAAQ,CAACE,OAAO,GAAGM,UAAU,CAAC,MAAM;QAClC,IAAI;UACFT,wBAAwB,CAAC,CAAC;QAC5B,CAAC,CAAC,OAAOU,KAAK,EAAE;UACdC,OAAO,CAACD,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;QAC7D,CAAC,SAAS;UACRb,QAAQ,CAAC,KAAK,CAAC;UACfI,QAAQ,CAACE,OAAO,GAAG,IAAI;QACzB;MACF,CAAC,EAAE,IAAI,CAAC;MAERQ,OAAO,CAACC,GAAG,CAAC,sDAAsD,CAAC;IACrE;EACF,CAAC;;EAED;EACApB,SAAS,CAAC,MAAM;IACd,OAAO,MAAM;MACX,IAAIS,QAAQ,CAACE,OAAO,EAAE;QACpBC,YAAY,CAACH,QAAQ,CAACE,OAAO,CAAC;MAChC;IACF,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO;IAAEP,KAAK;IAAEE,MAAM;IAAEI;EAAY,CAAC;AACvC,CAAC;AAACP,EAAA,CA5CWD,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}